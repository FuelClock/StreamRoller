<!--
      StreamRoller_source Copyright 2023 "SilenusTA https://www.twitch.tv/olddepressedgamer"
 
      StreamRoller is an all in one streaming solution designed to give a single
      'second monitor' control page and allow easy integration for configuring
      content (ie. tweets linked to chat, overlays triggered by messages, hue lights
      controlled by donations etc)
 
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as published
      by the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
 
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.
 
      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.
 
-->
<nav class="navbar navbar-expand-lg">
    <!-- logo name and version-->
    <a class="navbar-brand" style="font-size:2rem" href="/">
        <img src="/streamroom/images/ODG_logo_black_trans.png" width="30" height="30" class="d-inline-block "
            alt="Streamroller Home" onerror="scriptLoadFailed('ODG_logo_black_trans.png')">
        Streamroller<span id="softwareversion"
            style="font-size:0.8rem; color:rgba(255,255,255,.55);border: 0px;"></span>
    </a>
    <!--TABS -->
    <div class="navbar-nav">
        <ul class="nav nav-tabs  navbartablinks" id="StreamroomNavTabs">
            <li class="nav-item">
                <a class="nav-link active " id="home-tab" data-toggle="tab" href="#homepage">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="settings-tab" data-toggle="tab" href="#settingspage">Settings</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="triggers-tab" data-toggle="tab" href="#triggerspage">Triggers</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="help-tab" data-toggle="tab" href="#helppage">Help</a>
            </li>
        </ul>
    </div>
    <!-- Light/dark switch -->
    <div class="btn-group navbar-nav ms-auto">
        <a href="#" class="nav-item nav-link btn-sm darkswitch">Light/DarkMode</a>
    </div>
    &nbsp
    <!-- server status switch -->
    <div>
        <div class="btn-group">
            <button id="shutdownbutton" type="button" class="btn btn-danger dropdown-toggle" color="red"
                data-bs-toggle="dropdown" aria-expanded="false" title="Shutdown/Restart">
                <svg xmlns="http://www.w3.org/2000/svg" id="shutdownbuttonsvg" width="16" height="16" fill="grey"
                    class="bi bi-power " viewBox="0 0 16 16">
                    <path d="M7.5 1v7h1V1h-1z" />
                    <path
                        d="M3 8.812a4.999 4.999 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812z" />
                </svg>
            </button>
            <ul id="shutdownbutton_menu" class="dropdown-menu dropdown-menu-end">
                <li><a class="dropdown-item" href="#">StopServer</a></li>
                <li><a class="dropdown-item" href="#">RestartServer</a></li>
            </ul>
        </div>
    </div>
</nav>

<script>
    // ============================================================================
    //                                 setup Darkmode
    // ============================================================================
    let modeDark = localStorage.getItem("darkmode")
    window.onload = setDarkMode(modeDark)
    if (localStorage.getItem('darkmode') === null)
    {
        modeDark = "true";
        localStorage.setItem('darkmode', modeDark);
    }
    // ============================================================================
    //                     on click handler for switching dark mode
    // ============================================================================
    $('.darkswitch').click(() =>
    {
        if (modeDark == "true")
            modeDark = "false"
        else
            modeDark = "true"
        localStorage.setItem('darkmode', modeDark);
        setDarkMode(modeDark);
    });

    // ============================================================================
    //                           FUNCTION: refreshDarkMode
    // ============================================================================
    function refreshDarkMode ()
    {
        setDarkMode(localStorage.getItem("darkmode"))
    }
    // ============================================================================
    //                           FUNCTION: setDarkMode
    // ============================================================================
    function setDarkMode (modeDark)
    {
        // both arrays need to match up elements in the same indix. ie index 2 should be  and  to allow swapping
        let darkclasses = ['dark', '', 'navbar-dark', ''];
        let lightclasses = ['light', '', 'navbar-light', 'text-dark'];
        // get all the dark and light class items
        $([".light [class*='-light']", ".dark [class*='-dark']"]).each((i, ele) =>
        {
            //for each item in the class ...
            $(ele).each(function ()
            {
                let tag = ""; // class we are currently working on
                let newclasses = ""; // list of new classes to replace the existing ones
                let match = null // gets set to a new class if we have found a light/dark class
                for (i = 0; i < $(this)[0].classList.length; i++)
                {
                    match = null
                    tag = $(this)[0].classList[i].toString()
                    // close buttons are a special case and need to be opposite 
                    // need the opposite color to show the cross icon
                    if (tag === "btn-close")
                    {
                        //if going to ligth mode so set check for light close buttons and switch to dark
                        if (modeDark === "false")
                        {
                            checklist = lightclasses;
                            oppositechecklist = darkclasses;
                        }
                        else
                        {
                            checklist = darkclasses;
                            oppositechecklist = lightclasses;
                        }
                        //loop through these classes
                        for (j = 0; j < $(this)[0].classList.length; j++)
                        {
                            match = null
                            // as we are doing the looping here we need to move the main loop counter on
                            i++;
                            tag = $(this)[0].classList[j].toString()
                            checklist.forEach((element, index, arr) =>
                            {
                                if (element === tag)
                                    match = oppositechecklist[index]
                            })
                            if (match)
                                newclasses = newclasses + " " + match;

                            // if the tag didn't match just copy the original tag
                            if (!match)
                                newclasses = newclasses + " " + $(this)[0].classList[j].toString();
                        }
                    }
                    else 
                    {
                        if (modeDark === "true")
                        {
                            checklist = lightclasses;
                            oppositechecklist = darkclasses;
                        }
                        else
                        {
                            checklist = darkclasses;
                            oppositechecklist = lightclasses;
                        }
                        checklist.forEach((element, index, arr) =>
                        {
                            if (element === tag)
                                match = oppositechecklist[index]
                        })
                        if (match)
                            newclasses = newclasses + " " + match;

                        // if the tag didn't match just copy the original tag
                        if (!match)
                            newclasses = newclasses + " " + $(this)[0].classList[i].toString();
                    }
                }
                // change the classlist to the new modified oen
                $(this)[0].classList.value = newclasses.trim();
            })
        });

        // set the body tags (these don't get read by the above code)
        if (modeDark == "true")
        {
            $('body').addClass('dark').removeClass('light');
            $('body').addClass('').removeClass('');
            $('body').addClass('').removeClass('text-dark');
        }
        else
        {
            $('body').addClass('light').removeClass('dark');
            $('body').addClass('').removeClass('');
            $('body').addClass('text-dark').removeClass('');
        }
    }
    // ============================================================================
    //                     on click handler for tab pages
    // ============================================================================
    $('.navbartablinks a').on("click", function (e)
    {
        console.log("clicked")
        e.preventDefault();
        $(this).tab('show');
    });

</script>