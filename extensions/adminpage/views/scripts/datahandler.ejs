<script src="streamroller-message-api.cjs"></script>
<%- include('../modals/extensionsettingsplaceholdermodal'); %>
<%- include("../modals/adminmodalplaceholder.html"); %>
<script>
    const config = {
        // these first two come from the extensionhelper config file
        OUR_CHANNEL: "ADMIN_PAGE",
        EXTENSION_NAME: "adminpage",
    };
    const serverConfig = {
        extensionname: config.EXTENSION_NAME,
        channel: config.OUR_CHANNEL,
        logginglevel: "5"
    };
    // will hold the data center socket needed to send receive data
    // after refactoring the code this should hopefully not be needed anymore
    let DataCenterSocket = null;

    // DEBUGGING - Set this to true if you need your server data to be refreshed from above.
    // during development you may find your server data gets messed up if changing it often.
    // while uncommented your data will not presist and be overwritten by the above config
    // every time the server runs up.

    const OverwriteDataCenterConfig = false;

    // This is used to refresh the page on a new extension list
    // Currently if a second list comes in the submit handlers for the forms get broken
    // and any form submitted will cause an error.
    let bugfix_extensionlist_count = 0;

    //global data store for the app
    const adminData = {};
    adminData.extensions = {};
    // add our own extension card in to the display as we won't get a request from ourselves
    adminData.extensions[config.EXTENSION_NAME] = { admincard: document.getElementById('adminmodalplaceholder').innerHTML };
    UpdateAdminModalData();
    adminData.channellist = {};
    console.log("Connecting...");
    //Connect to backend when page is loaded
    var host = '<%- host %>';
    var port = '<%- port %>';
    ConnectToDataCenter(host, port);
    // we have a delay here to allow the socket to establish and allow the backend to
    // sort out the lists etc
    setTimeout(() =>
    {
        console.log("Requesting lists");
        RequestChList();
        RequestExtList();
    }, 1000);

    // ============================================================================
    //                           FUNCTION: ConnectToDataCenter
    // ============================================================================
    // Desription: Connect to the data center socket
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function ConnectToDataCenter(host, port)
    {
        try
        {
            DataCenterSocket = sr_api.setupConnection(onDataCenterMessage, onDataCenterConnect, onDataCenterDisconnect, host, port)
        } catch (err)
        {
            console.info("datahandler.initialise", "DataCenterSocket connection failed:", err);
        }
    }
    // ============================================================================
    //                           FUNCTION: onDataCenterDisconnect
    // ============================================================================
    // Desription: Received disconnect message
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function onDataCenterDisconnect(reason)
    {
        console.info("datahandler.onDataCenterDisconnect", reason);
    }
    // ============================================================================
    //                           FUNCTION: onDataCenterConnect
    // ============================================================================
    // Desription: Received connect message
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function onDataCenterConnect()
    {
        console.info("datahandler.onDataCenterConnect", "Registering our channel and requesting channel and extension list");
        console.log("DataCenterSocket " + DataCenterSocket.id);
        // DEBUGGING overwrite our config data on the server if the flag is set
        if (OverwriteDataCenterConfig)
            SaveConfigToServer();
        else
            sr_api.sendMessage(DataCenterSocket,
                sr_api.ServerPacket(
                    "RequestConfig",
                    config.EXTENSION_NAME
                ));

        //register our channels
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "CreateChannel",
                config.EXTENSION_NAME,
                config.OUR_CHANNEL
            ));


    }
    // ============================================================================
    //                           FUNCTION: onDataCenterMessage
    // ============================================================================
    // Desription: Received message
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function onDataCenterMessage(decoded_data)
    {
        //let decoded_data = JSON.parse(data);
        // -------------------------------------------------------------------------------------------------
        //                  RECEIVED CONFIG
        // -------------------------------------------------------------------------------------------------
        if (decoded_data.type === "ConfigFile")
        {
            console.info("datahandler.onDataCenterMessage", decoded_data.type
                + " for " + decoded_data.to);
            // update our config
            if (decoded_data.data != "")
                // check it is our config
                if (decoded_data.to === serverConfig.extensionname)
                {
                    for (const [key, value] of Object.entries(serverConfig))
                        if (key in decoded_data.data)
                            serverConfig[key] = decoded_data.data[key];
                    // update our modal to match the new data
                    UpdateAdminModalData();
                    //update the logging on the server
                    SaveConfigToServer();
                }
        }
        // -------------------------------------------------------------------------------------------------
        //                  RECEIVED CHANNEL LIST
        // -------------------------------------------------------------------------------------------------
        else if (decoded_data.type === "ChannelList")
        {
            console.info("datahandler.onDataCenterMessage", decoded_data.type + " received");
            adminData.channellist = decoded_data.data;
            var html = "<ul>";
            for (var i = 0; i < adminData.channellist.length; i++)
            {
                html += "<li>" + adminData.channellist[i] + "</li>";
            }
            html += "</ul>";
            document.getElementById("ChannelsListCard").getElementsByClassName("card-title")[0].innerHTML = "ChannelsList";
            document.getElementById("ChannelsListCard").getElementsByClassName("card-text")[0].innerHTML = html;
            // register to all channels that are available.
            adminData.channellist.forEach(element =>
            {
                sr_api.sendMessage(DataCenterSocket,
                    sr_api.ServerPacket(
                        "JoinChannel",
                        config.EXTENSION_NAME,
                        element
                    ));

            });
        }
        // -------------------------------------------------------------------------------------------------
        //                   RECEIVED EXTENSION LIST
        // -------------------------------------------------------------------------------------------------
        else if (decoded_data.type === "ExtensionList")
        {
            console.info(
                "datahandler.onDataCenterMessage", decoded_data.type + " received");
            // we need to reload the page if we receive more than one list due to callback handler isses
            // on the form
            if (bugfix_extensionlist_count > 0)
                location.reload();
            else
                bugfix_extensionlist_count++;
            //load extension cards
            loadExtensionCards(decoded_data.data);
        }
        else if (decoded_data.type === "ExtensionMessage")
        {
            decoded_packet = JSON.parse(decoded_data.data)
            console.info(".onDataCenterMessage", "ExtensionMessage ", decoded_packet.type);
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED ADMIN MODAL REQUEST
            // -------------------------------------------------------------------------------------------------
            if (decoded_packet.type === "RequestAdminModalCode")
            {
                console.info("datahandler.onDataCenterMessage", decoded_packet.type + " from "
                    + decoded_packet.from);
                SendModal(decoded_packet.from, decoded_packet.data);
            }
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED EXTENSION MODAL CODE
            // -------------------------------------------------------------------------------------------------
            else if (decoded_packet.type === "AdminModalCode")
            {
                console.info("datahandler.onDataCenterMessage", decoded_packet.type
                    + " from " + decoded_packet.from);
                addModal(decoded_packet.from, decoded_packet.data);
            }
            // -------------------------------------------------------------------------------------------------
            //                   RECEIVED MODAL DATA (someone hit submit on a dialog)
            // -------------------------------------------------------------------------------------------------
            else if (decoded_packet.type === "AdminModalData")
            {
                // check that it is ours
                if (decoded_packet.to === serverConfig.EXTENSION_NAME)
                {
                    // lets reset our config checkbox settings (modal will omit ones not
                    // checked in checkboxes so set them to "off" here first if you have them)
                    // set our config values to the ones in message
                    for (const [key, value] of Object.entries(decoded_packet.data))
                        serverConfig[key] = value;
                    // save our data to the server for next time we run
                    SaveConfigToServer();
                    //lets update our modal
                    UpdateAdminModalData();
                }
            }
            else
                console.info(".onDataCenterMessage", "ExtensionMessage not handled ", decoded_packet.type, " from ", decoded_packet.from);
        }
        else if (decoded_data.type === "ChannelData")
        {
            if (decoded_data.dest_channel == "TWITCH_CHAT")
            {
                displayChatMessages(decoded_data);
            } else
            {
                //log messages to screen
                displayChannelMessages(decoded_data);
            }
        } else if (decoded_data.type === "UnknownChannel")
        {
            console.info(".onDataCenterMessage", "Channel " + decoded_data.channel + " doesn't exist, scheduling rejoin");
            //channel might not exist yet, extension might still be starting up so lets rescehuled the join attempt
            // need to add some sort of flood control here so we are only attempting to join one at a time
            setTimeout(() =>
            {
                sr_api.sendMessage(DataCenterSocket,
                    sr_api.ServerPacket(
                        "JoinChannel",
                        config.EXTENSION_NAME,
                        decoded_data.channel
                    ));
            }, 10000);
        } else if (decoded_data.type === "ChannelJoined"
            || decoded_data.type === "ChannelCreated"
            || decoded_data.type === "ChannelLeft"
            || decoded_data.type === "LoggingLevel"
        )
        {
            // just a blank handler for items we are not using to avoid message from the catchall
        }
        // ------------------------------------------------ unknown message type received -----------------------------------------------
        else
            console.warn(".onDataCenterMessage", "Unhandled message type", decoded_data.type);
        displayChannelMessages(decoded_data);
    }

    // ============================================================================
    //                           FUNCTION: SaveConfigToServer
    // ============================================================================
    // Desription:save config on backend data store
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function SaveConfigToServer()
    {
        // saves our serverConfig to the server so we can load it again next time we startup
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "SaveConfig",
                config.EXTENSION_NAME,
                serverConfig,
            ));
    }
    // ============================================================================
    //                           FUNCTION: loadExtensionCards
    // ============================================================================
    // Desription: display message in allmessages card
    // Parameters: list of extension names
    // ----------------------------- notes ----------------------------------------
    // There is a bug here. If the backend restarts and the admin page isn't 
    // refreshed then any callbacks from the froms will fail. fix was to 
    // force a fresh of the page when a new extension list comes in. Not very
    // smooth :(
    // ===========================================================================
    function loadExtensionCards(extensions)
    {
        // First we create all the links (these may be changed below if the extension has provided a modal box)
        var html = "<ul>";
        for (var i = 0; i < extensions.length; i++)
        {
            // set the default link id with no href link until the extension provides one
            html += "<li id='" + extensions[i] + "'>" + extensions[i] + "</li>";
            // check if we have previously recorded this extension, if not we should add it
            if (!adminData.extensions[extensions[i]])
                adminData.extensions[extensions[i]] = {};
            // if we have had an updated list we probably need to request the
            RequestAdminModalsCode(extensions[i]);
        };
        html += "</ul>";
        document.getElementById("ExtensionsListCard").getElementsByClassName("card-title")[0].innerHTML = "ExtensionsList";
        document.getElementById("ExtensionsListCard").getElementsByClassName("card-text")[0].innerHTML = html;
        // lets check if we have a previous adminmodal card for this extension and if so add it to the link above
        for (var i = 0; i < extensions.length; i++)
            if (adminData.extensions[extensions[i]].admincard)
                addModal(extensions[i], adminData.extensions[extensions[i]].admincard)
    }
    // ===========================================================================
    //                           FUNCTION: SendModal
    // ===========================================================================
    // Desription: Send the modal code back after setting the defaults according 
    // to our server settings
    // Parameters: channel to send data to
    // ----------------------------- notes ---------------------------------------
    // none
    // ===========================================================================
    function SendModal(toextension)
    {

        let modalstring = adminData.extensions[config.EXTENSION_NAME].admincard;
        // first lets update our modal to the current settings
        for (const [key, value] of Object.entries(serverConfig))
        {
            // true values represent a checkbox so replace the "[key]checked" values with checked
            if (value === "on")
            {
                modalstring = modalstring.replace(key + "checked", "checked");
            }   //value is a string then we need to replace the text
            else if (typeof (value) == "string")
                modalstring = modalstring.replace(key + "text", value);
        }
        // send the modal data to the server
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "ExtensionMessage",
                config.EXTENSION_NAME,
                sr_api.ExtensionPacket(
                    "AdminModalCode",
                    config.EXTENSION_NAME,
                    modalstring),
                "",
                toextension
            ));
    }
    // ============================================================================
    //                           FUNCTION: addModal
    // ============================================================================
    // Desription: Add the admin code from the extension to the link
    // Parameters: 
    //          xname - name of extension
    //          data  - data to add
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function addModal(xname, data)
    {
        // only update modals if we have received the extension name from the server
        if (adminData.extensions[xname])
        {
            let modalbox = document.getElementById("ExtensionSettingsPlaceholder").children[0];
            // grab the <li> element for this extension
            let extLiTag = document.getElementById(xname);
            // remove the previous event listener (if there was one)
            $('#' + xname + "_modal").off('submit');
            //set the element contents to a blank extension placeholder
            // if we have already set this element to the placeholder page we don't want to do it again
            // otherwise it will replace the submit callback and throw an error when updated a second time.
            if (extLiTag.innerHTML === xname)
                extLiTag.innerHTML = modalbox.innerHTML;
            // setup the link to show the dialog
            extLiTag.getElementsByClassName("ext-modal-link")[0].href = "#" + xname + "_modal";
            extLiTag.getElementsByClassName("ext-modal-link")[0].innerHTML = xname;
            extLiTag.getElementsByClassName("modal")[0].id = xname + "_modal";
            // set the data from the extension
            document.getElementById(xname + "_modal").innerHTML = data;
            // add a callback handle
            $('#' + xname + "_modal").on('submit', function (event)
            {
                event.preventDefault();
                // if it is our own modal that has changed (another page has submitted one
                // we need to process it ourselves first
                if (xname == config.EXTENSION_NAME)
                {
                    processOwnModalSubmit(xname);
                    // now it is processed we can parse it and send the data out to other who
                    // migh have it on their page
                    parseExtensionModalData(xname);
                }
                else
                    parseExtensionModalData(xname);
                return false;
            });
            adminData.extensions[xname] = {
                admincard: document.getElementById(xname).innerHTML
            }
        }
    }
    // ============================================================================
    //                      FUNCTION: parseExtensionModalData
    // ============================================================================
    // Desription: This function will retireve the data from the modal and 
    // send the push the data out so others can update theirs to reflect the change
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function parseExtensionModalData(extension)
    {
        let fieldsAsArray = $('#' + extension + "_modal").serializeArray();
        // convert our array of objects into a more usable objet
        var fieldsAsObject = fieldsAsArray.reduce((obj, item) => (obj[item.name] = item.value, obj), {});
        if (fieldsAsObject.extensionname)
            sr_api.sendMessage(DataCenterSocket,
                sr_api.ServerPacket(
                    "ExtensionMessage",
                    config.EXTENSION_NAME,
                    sr_api.ExtensionPacket(
                        fieldsAsObject.modaldatatype,
                        config.EXTENSION_NAME,
                        fieldsAsObject,
                        "",
                        fieldsAsObject.extensionname)
                    , "",
                    fieldsAsObject.extensionname
                ));

    }
    // ============================================================================
    //                      FUNCTION: UpdateAdminModalData
    // ============================================================================
    // Desription: Update our own modal if our config has changed
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // 
    // ===========================================================================
    function UpdateAdminModalData()
    {
        //get the updated dom we just changed and change the rest using sting replace
        let modalstring = document.getElementById("adminmodalplaceholder").innerHTML;
        for (const [key, value] of Object.entries(serverConfig))
        {
            // checkboxes
            if (value === "on")
                modalstring = modalstring.replace(key + "checked", "checked");
            // replace text strings
            else if (typeof (value) == "string")
                modalstring = modalstring.replace(key + "text", value);
        }
        adminData.extensions[config.EXTENSION_NAME].admincard = modalstring;
    }
    // ============================================================================
    //                      FUNCTION: processOwnModalSubmit
    // ============================================================================
    // Desription: This function will retireve the data from the modal and 
    // send save it in the serverConfig after we hit the submit button
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function processOwnModalSubmit(name)
    {
        // get the modal data as an array
        let fieldsAsArray = $('#' + name + "_modal").serializeArray();
        // convert our array of objects into a more usable object
        var fieldsAsObject = fieldsAsArray.reduce((obj, item) => (obj[item.name] = item.value, obj), {});
        // if we have changed hte logging level let us set that now
        if (fieldsAsObject.logginglevel != "null" && serverConfig.logginglevel != fieldsAsObject.logginglevel)
        {
            // change server logging level
            changeServerLogging(fieldsAsObject.logginglevel);
            // change our logging level (probably should be a separate option)
            G_LOGLEVEL = fieldsAsObject.logginglevel;
        }
        // loop though our keys and set them to match what is in the modal
        for (const [key, value] of Object.entries(serverConfig))
        {
            if (value === "on" && !fieldsAsObject[key])
                serverConfig[key] = "off";
            if (key in fieldsAsObject)
                serverConfig[key] = fieldsAsObject[key];
        }
        //save the data to the server
        SaveConfigToServer();
    }
    // ============================================================================
    //                           FUNCTION: changeServerLogging
    // ============================================================================
    // Desription: display message in allmessages card
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // ----------------------------------------------------------------------------
    function changeServerLogging(logsetting)
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "SetLoggingLevel",
                config.EXTENSION_NAME,
                logsetting,
            ));
    }
    // ============================================================================
    //                           FUNCTION: Display channel message
    // ============================================================================
    // Desription: display message in allmessages card
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    /*  data currently available from a tag.
          tags {
                'badge-info': null,
            badges: null,
            'client-nonce': 'fbd0d5f051f84cde74c882b377509a8c',
            color: '#00FF7F',
            'display-name': 'wizardmitts',
            emotes: null,
            'first-msg': false,
            flags: null,
            id: '826cc240-67d5-45f3-a0cd-4ea792a96e50',
            mod: false,
            'room-id': '81687332',
            subscriber: false,
            'tmi-sent-ts': '1644530043690',
            turbo: false,
            'user-id': '141477605',
            'user-type': null,
            'emotes-raw': null,
            'badge-info-raw': null,
            'badges-raw': null,
            username: 'wizardmitts',
            'message-type': 'chat'
                }*/
    // ===========================================================================
    function displayChatMessages(data)
    {
        let chatdata = data.data;

        console.log(chatdata);
        let cardref = document.getElementById("ChatMessagesCardText")
        let today = new Date();
        let time = today.getHours() + ":" + String(today.getMinutes()).padStart(2, '0') + ":" + String(today.getSeconds()).padStart(2, '0');
        // make it colourful
        var timecolor = "<span style='color: #757875'>";
        var usercolor = "<span style='color: " + chatdata.data.color + "'>";

        let username = usercolor + ' ' + chatdata.data["display-name"] + "&gt</span>";
        time = timecolor + time + ":</span>";

        cardref.innerHTML = time + ":" + username + " " + chatdata.message + "<BR>" + cardref.innerHTML;
    }
    // ============================================================================
    //                           FUNCTION: Display channel message
    // ============================================================================
    // Desription: display message in allmessages card
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // None
    // ===========================================================================
    function displayChannelMessages(data)
    {
        let cardref = document.getElementById("MessagesCardText");
        let today = new Date();
        let time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
        let msgoutput = time;


        if (data.type === "ExtensionMessage")
        {
            let decoded_packet = JSON.parse(data.data);
            if (decoded_packet.type == "AdminModalCode")
                cardref.innerHTML += msgoutput + "[" + decoded_packet.from + "]" + " received Admin Modal Code<BR>";
            else
                cardref.innerHTML += msgoutput + "[" + decoded_packet.from + "]" + decoded_packet.type + "<BR>";
        }
        else if (data.type === "ChannelData")
        {
            if (data.dest_channel === "TWITCH_CHAT")
                return; // displayed by the chat window
            let decoded_packet = JSON.parse(data.data);
            if (data.dest_channel === "STREAMLABS_ALERT")
                cardref.innerHTML += msgoutput + "[" + decoded_packet.from + "]" + decoded_packet.type + "<BR>";
            else if (data.dest_channel === "DISCORD_CHAT")
                cardref.innerHTML += msgoutput + "[" + decoded_packet.from + "]" + decoded_packet.data + "<BR>";
            else
                cardref.innerHTML += msgoutput + "[" + decoded_packet.from + "]" + decoded_packet.message_type + "<BR>";
        } else
        {
            msgoutput = msgoutput + "[" + data.from + "]" + "[" + data.type + "]:";
            cardref.innerHTML += msgoutput + "<BR>";
        }
    }
    // ============================================================================
    //                           FUNCTION: RequestExtList
    // ============================================================================
    // Desription: Sends a message to the data center to get the list of extensions
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestExtList()
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestExtensionsList",
                config.EXTENSION_NAME,
            ));
    }
    // ============================================================================
    //                           FUNCTION: RequestChList
    // ============================================================================
    // Desription: Sends a message to the data center to get the list of channels
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestChList()
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestChannelsList",
                config.EXTENSION_NAME,
            ));
    }
    // ============================================================================
    //                           FUNCTION: RequestAdminModalsCode
    // ============================================================================
    // Desription: Sends a message to the data center to get the list of extensions
    // Parameters: none
    // ----------------------------- notes ----------------------------------------
    // none
    // ===========================================================================
    function RequestAdminModalsCode(extname)
    {
        console.log("admin:RequestAdminModalsCode ", extname);
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket("ExtensionMessage",
                config.EXTENSION_NAME,
                sr_api.ExtensionPacket(
                    "RequestAdminModalCode",
                    config.EXTENSION_NAME,
                    "",
                    extname),
                "",
                extname
            ));
    }
    // ============================================================================
    //                           FUNCTION: RequestLoggingLevel
    // ============================================================================
    function RequestLoggingLevel()
    {
        sr_api.sendMessage(DataCenterSocket,
            sr_api.ServerPacket(
                "RequestLoggingLevel",
                config.EXTENSION_NAME,
            ));
    }

</script>